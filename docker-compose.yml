version: '3.4'

services:

  ############################
  # Dapr runtime & infrastructure services
  ############################
  #dtc-redis:
  #  image: redis:6-alpine

  dtc-zipkin:
    image: openzipkin/zipkin:2.24.3
    ports:
      - 6499:9411

  #dapr-placement:
  #  image: "daprio/dapr"
  #  command: ["./placement", "-port", "50000"]

  dapr-config:
    build:
      context: ./dapr

  ############################
  # Membership Microservice
  ############################
  company.microservice.membership.service:
    image: ${DOCKER_REGISTRY-}companymicroservicemembershipservice
    build:
      context: .
      dockerfile: src/Company.Microservice.Membership.Service/Dockerfile
    depends_on:
      - seq.image
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
    #networks:
    #  - company-dapr

  company.microservice.membership.service-dapr:
    image: "daprio/daprd:1.11.2"
    command:
      [
        "./daprd",
        "-app-id",
        "company-microservice-membership-service",
        "-app-port",
        "80",
        "-app-protocol",
        "grpc",
        "-log-level",
        "debug",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yml",
        "dapr.io/config",
        "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.microservice.membership.service
    network_mode: "service:company.microservice.membership.service"

  ############################
  # Membership Manager
  ############################
  company.manager.membership.service:
    image: ${DOCKER_REGISTRY-}companymanagermembershipservice
    build:
      context: .
      dockerfile: src/Company.Manager.Membership.Service/Dockerfile
    depends_on:
      - seq.image
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
    #networks:
    #  - company-dapr

  company.manager.membership.service-dapr:
    image: "daprio/daprd:1.11.2"
    command:
      [
        "./daprd",
        "-app-id",
        "company-manager-membership-service",
        "-app-port",
        "80",
        "-app-protocol",
        "grpc",
        "-log-level",
        "debug",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yml",
        "dapr.io/config",
        "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.manager.membership.service
    network_mode: "service:company.manager.membership.service"

  ############################
  # Registration Engine
  ############################
  company.engine.registration.service:
    image: ${DOCKER_REGISTRY-}companyengineregistrationservice
    build:
      context: .
      dockerfile: src/Company.Engine.Registration.Service/Dockerfile
    depends_on:
      - seq.image
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
      - NATS__URL=nats://nats:4222
    #networks:
    #  - company-dapr

  company.engine.registration.service-dapr:
    image: "daprio/daprd:1.11.2"
    command:
      [
        "./daprd",
        "-app-id",
        "company-engine-registration-service",
        "-app-port",
        "80",
        "-app-protocol",
        "grpc",
        "-log-level",
        "debug",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yml",
        "dapr.io/config",
        "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.engine.registration.service
    network_mode: "service:company.engine.registration.service"

  ############################
  # User Access
  ############################
  company.access.user.service:
    image: ${DOCKER_REGISTRY-}companyaccessuserservice
    build:
      context: .
      dockerfile: src/Company.Access.User.Service/Dockerfile
    depends_on:
      - postgres.image
      - seq.image
    environment:
      - CONNECTIONSTRINGS__POSTGRES_USERS=Server=postgres.image;Port=${POSTGRES_PORT};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=Users;Pooling=true;
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
    #networks:
    #  - company-dapr

  company.access.user.service-dapr:
    image: "daprio/daprd:1.11.2"
    command:
      [
        "./daprd",
        "-app-id",
        "company-access-user-service",
        "-app-port",
        "80",
        "-app-protocol",
        "grpc",
        "-log-level",
        "debug",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yml",
        "dapr.io/config",
        "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.access.user.service
    network_mode: "service:company.access.user.service"

  ############################
  # Account Access
  ############################
  company.access.account.service:
    image: ${DOCKER_REGISTRY-}companyaccessaccountservice
    build:
      context: .
      dockerfile: src/Company.Access.Account.Service/Dockerfile
    depends_on:
      - seq.image
      - nats
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
      - NATS__URL=nats://nats:4222
    #networks:
    #  - company-dapr

    ############################
    # ENCRYPTION UTILITY
    ############################
  company.utility.encryption.service:
    image: ${DOCKER_REGISTRY-}companyutilityencryptionservice
    build:
      context: .
      dockerfile: src/Company.Utility.Encryption.Service/Dockerfile
    depends_on:
      - redis.image
      - postgres.image
      - seq.image
    environment:
      - CONNECTIONSTRINGS__REDIS=redis.image
      - CONNECTIONSTRINGS__POSTGRES_ENCRYPTION=Server=postgres.image;Port=${POSTGRES_PORT};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=Encryption;Pooling=true;
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
      - ZAMETEK__CACHEOPTIONS__ABSOLUTEEXPIRATIONINMINUTES=60
    #networks:
    #  - company-dapr

  company.utility.encryption.service-dapr:
    image: "daprio/daprd:1.11.2"
    command:
      [
        "./daprd",
        "-app-id",
        "company-utility-encryption-service",
        "-app-port",
        "80",
        "-app-protocol",
        "grpc",
        "-log-level",
        "debug",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yml",
        "dapr.io/config",
        "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.utility.encryption.service
    network_mode: "service:company.utility.encryption.service"

  ############################
  # CACHE UTILITY
  ############################
  company.utility.cache.service:
    image: ${DOCKER_REGISTRY-}companyutilitycacheservice
    build:
      context: .
      dockerfile: src/Company.Utility.Cache.Service/Dockerfile
    depends_on:
      - redis.image
      - seq.image
    environment:
      - CONNECTIONSTRINGS__REDIS=redis.image
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
      - CONNECTIONSTRINGS__OTEL=http://otel-collector:4317
      - CACHEOPTIONS__ABSOLUTEEXPIRATIONINMINUTES=60
    #networks:
    #  - company-dapr

  company.utility.cache.service-dapr:
    image: "daprio/daprd:1.11.2"
    command:
      [
        "./daprd",
        "-app-id",
        "company-utility-cache-service",
        "-app-port",
        "80",
        "-app-protocol",
        "grpc",
        "-log-level",
        "debug",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yml",
        "dapr.io/config",
        "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.utility.cache.service
    network_mode: "service:company.utility.cache.service"

  ############################
  # Redis cache
  ############################
  redis.image:
    image: redis:7.2.0
    ports:
      - 6385:6379
    #networks:
    #  - company-dapr

    ############################
    # Seq logging
    ############################
  seq.image:
    #command: --memory=16g --memory-swap=16g
    image: datalust/seq:2023.3
    #volumes:
    #  - ${SEQ_DATA}:/data
    ports:
      - 5342:${SEQ_API_PORT}
      - 81:${SEQ_UI_PORT}
    environment:
      - ACCEPT_EULA=Y
    #networks:
    #  - company-dapr

    ############################
    # Postgres state store
    ############################
  postgres.image:
    image: postgres:15.4
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5433:${POSTGRES_PORT}
    # volumes:
    #   - ${POSTGRES_DATA}:/var/lib/postgresql/data
    #networks:
    #  - company-dapr

    ############################
    # OpenTelemetry Collector
    ############################

  otel-collector:
    image: otel/opentelemetry-collector:0.83.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
      #- ${OTEL_DATA}/output:/etc/output:rw # Store the logs
    ports:
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
    depends_on:
      - dtc-zipkin
      - seq.image
    ############################
    # NATS Cluster
    ############################

  nats:
    image: nats:2.10.10
    ports:
      - "8222:8222"
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 "
    # networks: [ "nats" ]
  nats-1:
    image: nats:2.10.10
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --routes=nats://ruser:T0pS3cr3t@nats:6222"
    # networks: [ "nats" ]
    depends_on: [ "nats" ]
  nats-2:
    image: nats:2.10.10
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --routes=nats://ruser:T0pS3cr3t@nats:6222"
    # networks: [ "nats" ]
    depends_on: [ "nats" ]

# networks:
#   nats:
#     name: nats
